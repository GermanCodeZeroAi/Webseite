name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Node.js Frontend CI
  frontend-ci:
    name: Frontend CI (Node.js)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run format check
        run: npm run format:check

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm run test:coverage

      - name: Run performance tests
        run: npm run test:performance

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Run security tests
        run: npm run test:security

      - name: Run SEO tests
        run: npm run test:seo

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: frontend-ci
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build project
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Run visual regression tests
        run: npm run test:visual

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Python Backend CI
  backend-ci:
    name: Backend CI (Python)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f apps/backend/requirements.txt ]; then pip install -r apps/backend/requirements.txt; fi
          if [ -f apps/backend/requirements-dev.txt ]; then pip install -r apps/backend/requirements-dev.txt; fi

      - name: Run linting with flake8
        run: |
          if [ -d apps/backend/src ]; then
            pip install flake8
            flake8 apps/backend/src --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 apps/backend/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          fi

      - name: Run type checking with mypy
        run: |
          if [ -d apps/backend/src ]; then
            pip install mypy
            mypy apps/backend/src || echo "MyPy checks completed with warnings"
          fi

      - name: Run tests with pytest
        run: |
          if [ -d apps/backend ]; then
            pip install pytest pytest-cov
            if [ -d apps/backend/tests ]; then
              pytest apps/backend/tests --cov=apps/backend/src --cov-report=xml --cov-report=html
            else
              echo "No backend tests found, skipping pytest"
            fi
          fi

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm ci
          npm audit --audit-level=high

      - name: Check for Python security issues
        run: |
          pip install safety
          if [ -f apps/backend/requirements.txt ]; then
            safety check -r apps/backend/requirements.txt
          fi