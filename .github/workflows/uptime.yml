name: Uptime Monitor

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:
    # Allow manual triggering

env:
  SITE_URL: ${{ vars.SITE_URL || 'https://germancodezero.ai' }}
  HEALTH_ENDPOINT: ${{ vars.HEALTH_ENDPOINT || '/api/health' }}
  TIMEOUT_SECONDS: 10

jobs:
  uptime-check:
    name: Check Frontend & Backend Health
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Check Frontend Health
        id: frontend-check
        run: |
          echo "🌐 Checking frontend: $SITE_URL"
          
          # Check frontend with timeout
          if curl -f -s --max-time $TIMEOUT_SECONDS "$SITE_URL" > /dev/null; then
            echo "✅ Frontend is healthy"
            echo "frontend_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "❌ Frontend check failed"
            echo "frontend_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Check Backend Health
        id: backend-check
        run: |
          BACKEND_URL="${SITE_URL}${HEALTH_ENDPOINT}"
          echo "🔧 Checking backend health: $BACKEND_URL"
          
          # Check backend health endpoint with timeout
          response=$(curl -f -s --max-time $TIMEOUT_SECONDS "$BACKEND_URL" || echo "FAILED")
          
          if [ "$response" != "FAILED" ] && echo "$response" | grep -q -E '("status"|"health").*("ok"|"healthy"|"up")'; then
            echo "✅ Backend is healthy"
            echo "backend_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "❌ Backend health check failed"
            echo "backend_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Determine Overall Status
        id: overall-status
        run: |
          frontend="${{ steps.frontend-check.outputs.frontend_status }}"
          backend="${{ steps.backend-check.outputs.backend_status }}"
          
          if [ "$frontend" = "healthy" ] && [ "$backend" = "healthy" ]; then
            echo "overall_status=healthy" >> $GITHUB_OUTPUT
            echo "✅ All systems operational"
          else
            echo "overall_status=failed" >> $GITHUB_OUTPUT
            echo "❌ System degradation detected"
            
            # Prepare failure details
            failures=""
            if [ "$frontend" = "failed" ]; then
              failures="$failures- 🌐 Frontend ($SITE_URL) is unreachable or returning errors\n"
            fi
            if [ "$backend" = "failed" ]; then
              failures="$failures- 🔧 Backend health endpoint (${SITE_URL}${HEALTH_ENDPOINT}) is failing\n"
            fi
            
            echo "failure_details<<EOF" >> $GITHUB_OUTPUT
            echo -e "$failures" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Check for Existing Uptime Issue
        id: check-issue
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'uptime-incident',
              per_page: 1
            });
            
            if (issues.data.length > 0) {
              console.log(`Found existing uptime issue: #${issues.data[0].number}`);
              core.setOutput('existing_issue_number', issues.data[0].number);
              core.setOutput('has_existing_issue', 'true');
            } else {
              console.log('No existing uptime issues found');
              core.setOutput('has_existing_issue', 'false');
            }

      - name: Create Uptime Incident Issue
        if: steps.overall-status.outputs.overall_status == 'failed' && steps.check-issue.outputs.has_existing_issue == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = new Date().toISOString();
            const siteUrl = process.env.SITE_URL;
            const failureDetails = `${{ steps.overall-status.outputs.failure_details }}`;
            
            const issueBody = `## 🚨 Uptime Incident Detected
            
            **Incident Time:** ${timestamp}
            **Site URL:** ${siteUrl}
            
            ### Failed Components:
            ${failureDetails}
            
            ### Automatic Actions Taken:
            - ✅ Incident logged and tracked
            - ⏰ Monitoring continues every 5 minutes
            - 🔄 Issue will auto-close when services recover
            
            ### Next Steps:
            1. Investigate the failing components
            2. Check server logs and infrastructure
            3. Verify DNS and SSL configuration
            4. Test manually: ${siteUrl}
            5. Test backend health: ${siteUrl}${{ env.HEALTH_ENDPOINT }}
            
            ---
            *This issue was automatically created by the uptime monitoring workflow.*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Uptime Incident - ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,
              body: issueBody,
              labels: ['uptime-incident', 'bug', 'priority-high']
            });
            
            console.log(`Created uptime incident issue: #${issue.data.number}`);

      - name: Update Existing Issue with Current Status
        if: steps.overall-status.outputs.overall_status == 'failed' && steps.check-issue.outputs.has_existing_issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.check-issue.outputs.existing_issue_number }};
            const timestamp = new Date().toISOString();
            const failureDetails = `${{ steps.overall-status.outputs.failure_details }}`;
            
            const comment = `## 🔄 Incident Update - ${timestamp}
            
            **Status:** Still experiencing issues
            
            ### Current Failed Components:
            ${failureDetails}
            
            *Monitoring continues every 5 minutes...*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: comment
            });
            
            console.log(`Updated existing issue #${issueNumber} with current status`);

      - name: Close Resolved Uptime Issue
        if: steps.overall-status.outputs.overall_status == 'healthy' && steps.check-issue.outputs.has_existing_issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.check-issue.outputs.existing_issue_number }};
            const timestamp = new Date().toISOString();
            const siteUrl = process.env.SITE_URL;
            
            // Add resolution comment
            const resolutionComment = `## ✅ Incident Resolved - ${timestamp}
            
            **Status:** All systems operational
            **Recovery Time:** ${timestamp}
            
            ### Verified Components:
            - 🌐 Frontend (${siteUrl}) - Healthy
            - 🔧 Backend health endpoint - Healthy
            
            The uptime incident has been automatically resolved. All monitored services are now responding normally.
            
            ---
            *This issue was automatically closed by the uptime monitoring workflow.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: resolutionComment
            });
            
            // Close the issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: 'closed',
              labels: ['uptime-incident', 'resolved']
            });
            
            console.log(`Closed resolved uptime issue #${issueNumber}`);

      - name: Log Final Status
        if: always()
        run: |
          echo "=== Uptime Check Summary ==="
          echo "Frontend Status: ${{ steps.frontend-check.outputs.frontend_status }}"
          echo "Backend Status: ${{ steps.backend-check.outputs.backend_status }}"
          echo "Overall Status: ${{ steps.overall-status.outputs.overall_status }}"
          echo "Existing Issue: ${{ steps.check-issue.outputs.has_existing_issue }}"
          
          if [ "${{ steps.overall-status.outputs.overall_status }}" = "healthy" ]; then
            echo "🎉 All systems are operational!"
          else
            echo "⚠️  System issues detected and logged"
          fi